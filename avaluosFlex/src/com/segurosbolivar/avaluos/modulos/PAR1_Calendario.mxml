<?xml version="1.0" encoding="utf-8"?>
<!--- 
Modulo para la descarga de complementos y manuales
@implements modulos.IModule
@see mx.modules.Module
-->
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%" xmlns:services="services.*" xmlns:componentes="com.segurosbolivar.avaluos.componentes.*"
		   implements="modulos.IModule"
		   initialize="module1_initializeHandler(event)"
		   >
	<fx:Declarations>
		
		<services:CalendarioService id="calendarioService" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<componentes:wndFestivos id="pantallaFestivos"/>
		
		<s:ArrayCollection id="fechasEliminadas"/>
		<s:CallResponder id="retornaAniosResult"/>
		
		<s:ArrayCollection id="diasNoHabiles"/>
		<s:CallResponder id="buscarDiasNoHabilesResult" result="buscarDiasNoHabilesResult_resultHandler(event)"/>
		<s:CallResponder id="cargaSabadosDomingosResult"/>
		<s:CallResponder id="borraFechasResult"/>
		<s:CallResponder id="getMensajeTransaccionResult" result="getMensajeTransaccionResult_resultHandler(event)" />
		<mx:DateFormatter id="formatDateTime" formatString="DD-MMM-YYYY HH:NN:SS" />
	</fx:Declarations>	
	<fx:Style source="assets/css/AvaluosBolivar.css"/>
	<fx:Style source="assets/css/AvaluosBolivarPanel.css"/>

	<fx:Script>
		<![CDATA[
			import com.segurosbolivar.avaluos.componentes.wndFestivos;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ModuleEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import permisos.Permiso;
			
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			
			import valueObjects.Calendario;
			import valueObjects.Usuario;			
			
			private var _anioConsultado:Number; 
			public var titleWindow:TitleWindow;
			
			[Bindable]
			public var myUsuario:Usuario;			
			
			[Bindable]
			public var anio:String = null;
			
			[Bindable]
			var cal:Calendario = new Calendario();
			
			[Bindable]
			public var mensaje:String = new String();
			
			
			[Bindable]
			var myListaPermisos:Permiso;
			
			public function setTexto(t:String):void
			{
			}
			
			public function setPermisos(listaPermisos:Permiso):void
			{
				myListaPermisos = listaPermisos;
			}	
			
			public function getPermisos():Permiso
			{
				return myListaPermisos;
			}
			
			/**
			 * Llama al procedimiento que carga sábados y domingos
			 **/ 
			public function ejecutar():void
			{ var anioNuevo:String = anioCargue.text as String;  
				
              if( anioNuevo != null && anioNuevo != "")
			  {	  
				cargaSabadosDomingosResult.token = calendarioService.cargaSabadosDomingos(anioNuevo, myUsuario.codigoUsuario);
				retornaAniosResult.token = calendarioService.retornaAnios();
			  }	
			  else
			  { Alert.show("Debe digitar primero el año a cargar","Advertencia");
			  }	  
			}
			
			/**
			 * Llama a la ventana de adicionar fechas
			 **/ 
			public function adicionar():void
			{ titleWindow = PopUpManager.createPopUp(DisplayObject(systemManager),wndFestivos, true, null, moduleFactory) as TitleWindow;
			  titleWindow.width = 670;
			  titleWindow.addEventListener(CloseEvent.CLOSE, closeMe, false, 0, true);
			}
			
			public function consultar():void
			{ buscarDiasNoHabilesResult.token = calendarioService.buscarDiasNoHabiles(anio);
			}
			
			public function imprimir():void
			{
			}
			
			public function editar():void
			{
			}
			
			/**
			 * Función que elimina las fechas 
			 **/
			public function eliminar():void
			{ fechasEliminadas.removeAll();
			  cal = diasNoHabiles.getItemAt(dataGrid.selectedIndex) as Calendario;
			  fechasEliminadas.addItem(cal);
			  borraFechasResult.token = calendarioService.borraFechas(fechasEliminadas);
			  getMensajeTransaccionResult.token = calendarioService.getMensajeTransaccion();
			  diasNoHabiles.removeItemAt(dataGrid.selectedIndex);
			  diasNoHabiles.refresh();
			}
			
			[Bindable]
			public function get anioConsultado():Number
			{
				return _anioConsultado;
			}

			public function set anioConsultado(value:Number):void
			{
				_anioConsultado = value;
			}

			[Bindable]
			public var _testePopUp:wndFestivos;
			
			/**
			 * Parametriza la ventana de ingreso de festivos 
			 **/
			protected function button1_clickHandler(event:MouseEvent):void
			{	titleWindow = PopUpManager.createPopUp(DisplayObject(systemManager),wndFestivos, true, null, moduleFactory) as TitleWindow;
				titleWindow.title ="Ingreso de Días Festivos";
				titleWindow.width = 670;
				titleWindow.addEventListener(CloseEvent.CLOSE, closeMe, false, 0, true);
			}
			
			/**
			 * Cierra la ventana 
			 **/
			private function closeMe(e:CloseEvent):void {
				PopUpManager.removePopUp(titleWindow);
				titleWindow.removeEventListener(CloseEvent.CLOSE, closeMe);
			}	

			protected function btn2_2_clickHandler(event:MouseEvent):void {
				titleWindow = PopUpManager.createPopUp(DisplayObject(systemManager),wndFestivos, true, null, moduleFactory) as TitleWindow;
				titleWindow.title ="Module Title Window";
				titleWindow.width = 426;
				titleWindow.addEventListener(CloseEvent.CLOSE, closeMe, false, 0, true); 
			}
			

			/**
			 * Consulta las fechas no hábiles 
			 **/
			protected function button_clickHandler(event:MouseEvent):void
			{ buscarDiasNoHabilesResult.token = calendarioService.buscarDiasNoHabiles(anio);
			}
			

			/**
			 * Puebla el combo de años 
			 **/
			protected function dropDownList_creationCompleteHandler(event:FlexEvent):void
			{
				retornaAniosResult.token = calendarioService.retornaAnios();
			}
			

			protected function buscarDiasNoHabilesResult_resultHandler(event:ResultEvent):void
			{
				diasNoHabiles = buscarDiasNoHabilesResult.lastResult as ArrayCollection;
			}

			protected function button2_clickHandler(event:MouseEvent):void
			{ cargaSabadosDomingosResult.token = calendarioService.cargaSabadosDomingos(anio, myUsuario.codigoUsuario);
			}
			

			/**
			 * Elimina las fechas y refresca el datagrid 
			 **/
			protected function button3_clickHandler(event:MouseEvent):void
			{ fechasEliminadas.removeAll();
			  cal = diasNoHabiles.getItemAt(dataGrid.selectedIndex) as Calendario;
			  fechasEliminadas.addItem(cal);
			  borraFechasResult.token = calendarioService.borraFechas(fechasEliminadas);
			  getMensajeTransaccionResult.token = calendarioService.getMensajeTransaccion();
			  diasNoHabiles.removeItemAt(dataGrid.selectedIndex);
			  diasNoHabiles.refresh();
			}
			

			/**
			 * Retorna el resultado de la transacción 
			 **/
			protected function getMensajeTransaccionResult_resultHandler(event:ResultEvent):void
			{
				mensaje = getMensajeTransaccionResult.lastResult as String;
				if(mensaje!=null)
				{
					Alert.show(mensaje);
				}
			}

			protected function module1_initializeHandler(event:FlexEvent):void
			{
				myUsuario = parentApplication.getUsuarioActual();
			}
			
			protected function labelFechaC(item:Object, column:DataGridColumn):String
			{ if(item.fechaCreacion != null)
			{ return formatDateTime.format(item.fechaCreacion);
			}else 
				return "";				
			}

		]]>
	</fx:Script>

	<s:Group width="100%" height="100%">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:HGroup width="100%" x="0" height="30%" y="0">
			<s:VGroup width="100%" height="100%">
				<s:Label text="Seleccione el año a consultar"/>
				<s:ComboBox id="dropDownList" creationComplete="dropDownList_creationCompleteHandler(event)" selectedItem="@{anio}" requireSelection="false">
					<s:AsyncListView list="{retornaAniosResult.lastResult}"/>
				</s:ComboBox>
				<s:Label text="Digite el año a Cargar"/>
				<s:TextInput id="anioCargue"/>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup x="0" y="118" width="100%" height="70%">
			<mx:DataGrid id="dataGrid"  dataProvider="{diasNoHabiles}" width="100%" height="100%">
				<mx:columns>
					<mx:DataGridColumn headerText="Año" dataField="anio"/>
					<mx:DataGridColumn headerText="Fecha No Hábil" dataField="fechaNoHabil"/>
					<mx:DataGridColumn headerText="Usuario de Creación" dataField="usuarioCreacion"/>
					<mx:DataGridColumn headerText="Fecha de Creación" dataField="fechaCreacion" labelFunction="labelFechaC" />
				</mx:columns>
			</mx:DataGrid>
		</s:HGroup>
	</s:Group>
</mx:Module>
