<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" width="884" height="498" xmlns:valueObjects="valueObjects.*" xmlns:services="services.*"
		   implements="modulos.IModule" initialize="module1_initializeHandler(event)"
		   remove="module1_removedHandler(event)" creationComplete="module_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.segurosbolivar.avaluos.componentes.WndErrValidacionAvaluo;
			
			import flash.events.Event;
			import flash.net.URLRequest;
			import flash.utils.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.skins.halo.WindowBackground;
			
			import org.hamcrest.object.equalTo;
			import org.osmf.media.LoadableMediaElement;
			
			import permisos.Permiso;
			
			import valueObjects.Avaluo;
			import valueObjects.DominiosAux;
			import valueObjects.HistoricoLogsGeneraArch;
			import valueObjects.LogsGeneraArchivo;
			import valueObjects.Usuario;			
			var jSess = FlexGlobals.topLevelApplication.parameters.jSessionId;
			private var TARGET_URL:String = "poll.html;jsessionid="+jSess;
			private var timerAsync:Timer = null;
			private var urlReq:URLRequest;
			private var urlLdr:URLLoader;			
			
			
			/**
			* Este llama al metodo que inicia el temporizador
			* */
			/*private function init(): void {
				//Initialize the URLLoader object, assign the various event listeners, and load the specified URLRequest object. 
				startPolling();
			}*/
			/**
			* Este metodo inicia el temporizador que genera trafico mientras  
			* se ejecutan los procesos
			* */
			private function startPolling() : void
			{
				init();
				urlLdr = new URLLoader();
				urlLdr.addEventListener(Event.COMPLETE, handlePollReq);
				urlLdr.addEventListener(Event.OPEN, handlePollReq);
				urlLdr.addEventListener(HTTPStatusEvent.HTTP_STATUS, handlePollReq);
				urlLdr.addEventListener(IOErrorEvent.IO_ERROR, handlePollReq);
				urlLdr.addEventListener(ProgressEvent.PROGRESS, handlePollReq);
				urlLdr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handlePollReq);
				
				this.timerAsync = new Timer(30000, 0);
				this.timerAsync.addEventListener(TimerEvent.TIMER, this.onPoll);
				this.timerAsync.start();
				setPollTimeOutJS();
				try { 
					this.timerAsync.start();
					
				} catch (error:Error) {
					trace(error)
				}
				try { 
					setPollTimeOutJS();
					
				} catch (error:Error) {
					trace(error)
				}	
			}
			/**
			* Este metodo adiminstra las peticiones asincronas al temporizador
			* */	
			private function onPoll(param1:TimerEvent) : void
			{
				trace("cargo pagina asincrona");
				try { 
					urlLdr.load(new URLRequest(TARGET_URL));
					
				} catch (error:SecurityError) { } 
			}
		    /**
			* Este metodo adiminstra las peticiones asincronas al temporizador
			* */	
			private function handlePollReq(evt:Event) :void {
				switch (evt.type) {
					case Event.COMPLETE:
						var ldr:URLLoader = evt.currentTarget as URLLoader;
				}     
			}
			/**
			* Este metodo detiene el temporizador que genera trafico mientras  
			* se ejecutan los procesos
			* */
			private function stopPolling() : void
			{			
				unInit();
				try { 
					this.timerAsync.stop();
					clearPollTimeOutJS();
					
				} catch (error:Error) {
					trace(error)
				}
				try { 
					clearPollTimeOutJS();
					
				} catch (error:Error) {
					trace(error)
				}
			}			
			/**
			 * Este metodo permite usar un 
			 * javascript externo a la pelicula para el poll
			 * */
			public function setPollTimeOutJS():void {
				var s:String;
				if (ExternalInterface.available) {
					var wrapperFunction:String = "setTimeOut1";
					s = ExternalInterface.call(wrapperFunction);
				} else {
					s = "No se puede acceder a javascript";
				}
				trace(s); 
			}
			/**
			 * Este metodo permite usar un 
			 * javascript externo a la pelicula para el poll 
			 * */			
			public function clearPollTimeOutJS():void {
				var s:String;
				if (ExternalInterface.available) {
					var wrapperFunction:String = "clearTimeOut1";
					s = ExternalInterface.call(wrapperFunction);
				} else {
					s = "No se puede acceder a javascript";
				}
				trace(s); 
			}
			//
			
			[Bindable]
			public var mensaje:String = new String();
			
			[Bindable]
			public var myUsuario:Usuario;
			
			[Bindable]
			public var myListaPermisos:Permiso;
			
			protected function module1_initializeHandler(event:FlexEvent):void
			{
				myUsuario = parentApplication.getUsuarioActual();
				//Se obtiene servicio de Mensajeria desde MenuPrincipal
				producer=parentApplication.getProducer();
				consumer=parentApplication.getConsumer();
				
				setUsuarioTransaccionResult.token = archivoProcedatosService.setUsuarioTransaccion(myUsuario.cedulaEmpleado);
				//setUsuarioTransaccionResult2.token = logsArchivoService.setUsuarioTransaccion1(myUsuario.cedulaEmpleado);
				
			}
			
			public function setTexto(t:String):void
			{
			}
			public function setPermisos(listaPermisos:Permiso):void
			{
				myListaPermisos = listaPermisos;
			}				
			public function getPermisos():Permiso
			{
				return myListaPermisos;
			}				
			public function ejecutar():void
			{
			}	
			
			/**
			 * Crea una fila nueva para insertar un registro nuevo
			 * */
			public function adicionar():void
			{
				
			}							
			public function consultar():void
			{				
				logsGeneraArchivo.estado = cbxEstadoLog.selectedItem.rvLowValue;
				logsGeneraArchivo.fechaDesde=null;
				logsGeneraArchivo.fechaHasta=null;
				
				
				var isFechaAvaluoFiltroDesde:Boolean = (fechaAvaluoFiltro != null) &&  (fechaAvaluoFiltro.text.length > 0) ? true : false;
				
				if(isFechaAvaluoFiltroDesde)
				{				
					//informacionInmueble.avaluo.fechaCreacion = fechaCreacionDesde.selectedDate;
					logsGeneraArchivo.fechaDesde = fechaAvaluoFiltro.selectedDate;
				}	
				
				var isFechaAvaluoFiltroHasta:Boolean = (fechaAvaluoFiltroHasta != null) &&  (fechaAvaluoFiltroHasta.text.length > 0) ? true : false;
				
				if(isFechaAvaluoFiltroHasta)
				{				
					//informacionInmueble.avaluo.fechaCreacion = fechaCreacionDesde.selectedDate;
					logsGeneraArchivo.fechaHasta = fechaAvaluoFiltroHasta.selectedDate;
				}	
				
				findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logsGeneraArchivo);
//				getMensajeTransaccionResult.token = logsArchivoService.getMensajeTransaccion();
			}							
			
			public function imprimir():void
			{
				
			}							
			
			/**
			 * Actualiza el valor un registro 
			 * */
			public function editar():void
			{
				
			}	
			
			public function eliminar():void	
			{
				
			}
			
			/**
			 * Llama al servicio de consulta de logsGeneraArchivo, para poblar
			 * la grilla desde su creación
			**/ 
			protected function dtgLogsArchivo_creationCompleteHandler(event:FlexEvent):void
			{
				findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logsGeneraArchivo);
			}
			
			
			const CONST_LIMITE_CONSULTA:Number = 1000;
			/**
			 * Actualiza la grilla con el resultado del servicio logsGeneraArchivo 
			 * */
			protected function findLogsGeneraArchivoResult_resultHandler(event:ResultEvent):void
			{
				if(findLogsGeneraArchivoResult.lastResult.length > 0) {
					
					if(findLogsGeneraArchivoResult.lastResult.length >= CONST_LIMITE_CONSULTA) {
						
						Alert.show("Se muestran los Primeros "+CONST_LIMITE_CONSULTA+" registros. si requiere filtre mas su consulta","INFO");
						
						btnReversar.enabled = true;
						btnCambiarEstado.enabled = true;
						btnLog.enabled=true;
					}
					else
					{	
						btnReversar.enabled = true;
						btnCambiarEstado.enabled = true;
						btnLog.enabled=true;
					}
					
				}
				else {
					btnReversar.enabled = false;
					btnCambiarEstado.enabled = false;
					btnLog.enabled=false;
					Alert.show("Sin resultados, intente otros criterios de búsqueda","INFO");
				}
				dtgLogsArchivo.invalidateDisplayList();
				
			}

			/**
			 * Actualiza el combobox cbxEstadoLog con la lista de valores del dominio ESTADOARCHIVO
			 * */
			protected function cbxEstadoLog_creationCompleteHandler(event:FlexEvent):void
			{
				var dominio:DominiosAux = new DominiosAux();
				dominio.rvDomain = "ESTADOARCHIVO";
				getValoresDominioProcedatosResult.token = dominiosAuxDao.getValoresDominioProcedatos(dominio);
			}
			
			/**
			 * Captura el registro seleccionado en el datagrid dtgLogsArchivo y
			 * extrae el nombre del archivo para descargarlo
			 * */
			public function linkbutton1_clickHandler(event:MouseEvent):void
			{
				logsGeneraArchivo = dtgLogsArchivo.selectedItem as LogsGeneraArchivo;
				var fileDownload:FileDownload = new FileDownload();
				fileDownload.init(null,null);
				fileDownload.startProcedatosDownload(logsGeneraArchivo.linkDescarga.concat(logsGeneraArchivo.nombreArchivo));	
			}
			
			/**
			 * Captura el registro seleccionado en el datagrid dtgLogsArchivo y
			 * muestra el log de errores del archivo de procedatos
			 * */
			public function linkbutton2_clickHandler(event:MouseEvent):void
			{
				logsGeneraArchivo = dtgLogsArchivo.selectedItem as LogsGeneraArchivo;
				
				var ventanaErr:WndErrValidacionAvaluo = new WndErrValidacionAvaluo();
				ventanaErr.setTextoErrValidacionAvaluo(logsGeneraArchivo.descripcionError);
				
				ventanaErr.showCloseButton = true;
				PopUpManager.addPopUp(ventanaErr,this,true);
				PopUpManager.centerPopUp(ventanaErr); 
				
			}
			
			/**
			 * Pasa a estado reversado los registros seleccionados
			 * */
			protected function btnReversar_clickHandler(event:MouseEvent):void
			{								
				
				var idList:ArrayCollection = new ArrayCollection();
				var i:int;
				var isSelccionvalida:Boolean = false;
				for(i = 0; i < dtgLogsArchivo.selectedItems.length; i++ ){
					var log:LogsGeneraArchivo = dtgLogsArchivo.selectedItems[i] as LogsGeneraArchivo;
					if((log.estado.toLocaleLowerCase() == "Generado".toLocaleLowerCase()) || (log.estado.toLocaleLowerCase() == "Enviado".toLocaleLowerCase())) {
						isSelccionvalida = true;
					}
					else {
						break;
					}
					
					var val:String = log.idLogArchivos;
					idList.addItem(val);
				}
				
				if(isSelccionvalida) {
					//
					startPolling();
					//
					/*setUsuarioTransaccionResult2.token = logsArchivoService.setUsuarioTransaccion(myUsuario.cedulaEmpleado);
					setUsuarioTransaccionResult.token = logsArchivoService.setUsuarioTransaccion(myUsuario.cedulaEmpleado);*/
					/*logsGeneraArchivo.usuarioTransaccion=myUsuario.cedulaEmpleado;
					logsGeneraArchivo.fechaTransaccion=new Date();*/
					//reversarArchivoGeneradoResult.token = logsArchivoService.reversarArchivoGenerado(idList);
					reversarArchivoGeneradoResult.token = logsArchivoService.reversarArchivoGeneradoUsr(idList,myUsuario.cedulaEmpleado);
				}
				else {
					Alert.show("Unicamente puede reversar filas en estado Generado o Enviado ");
				}
			}
			
			/**
			 * Cambia el estado de los registros seleccionados a enviado
			 * */
			protected function btnCambiarEstado_clickHandler(event:MouseEvent):void
			{
				var logsGeneraArchivoList:ArrayCollection = new ArrayCollection();
				var i:int;
				var isSelccionvalida:Boolean = true;
				for(i = 0; i < dtgLogsArchivo.selectedItems.length; i++ ){
					var unLog:LogsGeneraArchivo = dtgLogsArchivo.selectedItems[i] as LogsGeneraArchivo; 
					if(unLog.estado.toLowerCase() != "generado".toLowerCase()) {
						isSelccionvalida = false;
						break;
					}
					logsGeneraArchivoList.addItem(unLog);
				}
				if(isSelccionvalida) {
					//
					startPolling();
					//
					//setEstadoResult2.token = logsArchivoService.setEstado(logsGeneraArchivoList);
					setEstadoResult2.token = logsArchivoService.setEstadoUsr(logsGeneraArchivoList,myUsuario.cedulaEmpleado);
//					getMensajeTransaccionResult.token = logsArchivoService.getMensajeTransaccion();
//					findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logsGeneraArchivo);
				}
				else {
					Alert.show("Del estado actual no puede cambiar de estado reversado a enviado","INFO");
				}
			}
			
			protected function getMensajeTransaccionResult_resultHandler(event:ResultEvent):void
			{
				mensaje = getMensajeTransaccionResult.lastResult as String;
				if(mensaje!=null)
				{
					Alert.show(mensaje);
				}
				mensaje = null;
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				var fecha:Date = fechaCorte.selectedDate;
				
				//
				startPolling();
				//
				
				getAvaluosResult.token = archivoProcedatosService.getAvaluos(fecha);
			}
			
			private function dateChooser_init(dt:DateField):void {
				dt.dayNames=['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'];
				dt.monthNames=[	'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
					'Julio', 'Agosto', 'Septiembre', 'Octubre',
					'Noviembre', 'Diciembre'];
				dt.firstDayOfWeek = 1;
				dt.formatString = "DD/MM/YYYY";
			}
			
			protected function labelFechaInicio(item:Object, column:DataGridColumn):String{
				if(item.fechaInicioCreacion != null){					
					return formatDateTime.format(item.fechaInicioCreacion);
					/*var df:DateFormat =new DateFormat();					
					df.formatString="DD/MM/YYYY JJ:NN";					
					return df.format(item.fechaInicioCreacion);*/
				}
				else { 
					return "";
				}
			}
			
			protected function labelFechaFin(item:Object, column:DataGridColumn):String{
				if(item.fechaFinCreacion != null){
					return formatDateTime.format(item.fechaFinCreacion);
					/*var df:DateFormat =new DateFormat();					
					df.formatString="DD/MM/YYYY JJ:NN";					
					return df.format(item.fechaFinCreacion);*/
				}
				else { 
					return "";
				}
			}


			protected function getAvaluosResult_resultHandler(event:ResultEvent):void
			{
				var res:ArrayCollection = getAvaluosResult.lastResult;
				if(res == null)
				{
					Alert.show('El archivo fue generado con errores','INFO');
					//Se utiliza para filtrar
					var logGeneraTmp:LogsGeneraArchivo = new LogsGeneraArchivo();
					logGeneraTmp.estado = "R";
					findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logGeneraTmp);
				}
				else if(res.length < 1)
				{
					var logGeneraTmp:LogsGeneraArchivo = new LogsGeneraArchivo();
					logGeneraTmp.estado = "G";
					findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logGeneraTmp);
				}
				
				getMensajeTransaccionResult.token = archivoProcedatosService.getMensajeTransaccion();
				dtgLogsArchivo.invalidateList();
				dtgLogsArchivo.invalidateDisplayList();
				
				//
				stopPolling();
				//
				
			}


			protected function reversarArchivoGeneradoResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("Proceso realizado satisfactoriamente","INFO");
				//Se utiliza para filtrar
				var logGeneraTmp:LogsGeneraArchivo = new LogsGeneraArchivo();
				logGeneraTmp.estado = "V";
				findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logsGeneraArchivo);
				dtgLogsArchivo.invalidateList();
				dtgLogsArchivo.invalidateDisplayList();
				//
				stopPolling();
				//
			}


			protected function setEstadoResult2_resultHandler(event:ResultEvent):void
			{
				Alert.show("Proceso realizado satisfactoriamente","INFO");
				var logGeneraTmp:LogsGeneraArchivo = new LogsGeneraArchivo();
				logGeneraTmp.estado = "E";
				findLogsGeneraArchivoResult.token = logsArchivoService.findLogsGeneraArchivo(logsGeneraArchivo);
				dtgLogsArchivo.invalidateList();
				dtgLogsArchivo.invalidateDisplayList();
				//
				stopPolling();
				//
			}

			protected function module1_removedHandler(event:Event):void
			{
				//
				stopPolling();
				//
			}

			
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.ChannelSet;
			import mx.messaging.events.MessageFaultEvent;
			import mx.messaging.events.MessageAckEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.controls.Alert;
			import mx.rpc.remoting.mxml.RemoteObject;
			import mx.rpc.events.ResultEvent;
			import mx.messaging.messages.IMessage;
			import mx.controls.Alert;
			
			import mx.messaging.Consumer;
			import mx.messaging.Producer;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.events.MessageAckEvent;
			import mx.messaging.events.MessageEvent;
			
			//Variables para obtener el servicio de mensajeria desde MenuPrincipal
			[Bindable]
			var producer:Producer;
			var consumer:Consumer;
						
			private function init():void
			{
				//Se modifica codigo de Mensajeria (Ahora esta en MenuPrincipal)
				/*var msg:AsyncMessage = new AsyncMessage();
				//creating new msg with “New” to get current state.
				msg.body = "New";
				producer.send(msg);
				consumer.subscribe();*/
				producer.addEventListener(MessageAckEvent.ACKNOWLEDGE,ack);
				consumer.addEventListener(MessageEvent.MESSAGE,messageHandler);				
				consumer.addEventListener(MessageFaultEvent.FAULT,handleFault);
			}
			private function unInit():void
			{
				estadoProc.text="";
				//Se modifica codigo de Mensajeria (Ahora esta en MenuPrincipal)
				/*producer.disconnect();
				consumer.unsubscribe(false);
				consumer.disconnect();*/
				producer.removeEventListener(MessageAckEvent.ACKNOWLEDGE,ack);
				consumer.removeEventListener(MessageEvent.MESSAGE,messageHandler);
				consumer.removeEventListener(MessageFaultEvent.FAULT,handleFault);
			}
			private function handleFault(event:MessageFaultEvent):void
			{Alert.show(event.faultString);
			}
			private function ack(event:MessageAckEvent):void
			{
				//Alert.show("ack"+event.message.body as String);
			}
			
			//Funciones de Mensajeria
			private function messageHandler(message:MessageEvent):void
			{
				//if(message.body.toString().indexOf(fileUpload.getFileName()+" PROCESANDO LINEA: ") > -1)
				/*if(message.body.toString().indexOf("GENERANDO ARCHIVOS DE PROCEDATOS. POR FAVOR ESPERE") > -1)				
				{
					estadoProc.text = message.body.toString();
				}*/
				//if(message.body.toString().indexOf(" ") > -1)				
				//if(message.body.toString().indexOf(" ") == 0)
				
				/*if (message is IMessage){*/
					var msg:IMessage = message.message as IMessage;
					//if(message.body.toString().indexOf("__") > -1)
					if(msg.body.toString().indexOf("__") > -1)
					{
						//estadoProc.text = message.body.toString();
						//estadoProc.text = message.body.toString().replace("__","");
						estadoProc.text = msg.body.toString().replace("__","");
					}
				/*}*/
			}
			

			protected function module_creationCompleteHandler(event:FlexEvent):void
			{
				//setUsuarioTransaccionResult.token = archivoProcedatosService.setUsuarioTransaccion(/*Enter value(s) for */ arg0);
				//setUsuarioTransaccionResult2.token = logsArchivoService.setUsuarioTransaccion(/*Enter value(s) for */ arg0);
			}
			

				
			[Bindable]
			var ventana:WndLogArchivo;

			
			import com.segurosbolivar.avaluos.componentes.WndLogArchivo;
			
			protected function btnLog_clickHandler(event:MouseEvent):void
			{
				var idList:ArrayCollection = new ArrayCollection();
				var i:int;
				var isSelccionvalida:Boolean = false;
				for(i = 0; i < dtgLogsArchivo.selectedItems.length; i++ ){
					var log:LogsGeneraArchivo = dtgLogsArchivo.selectedItems[i] as LogsGeneraArchivo;
					
					var val:String = log.idLogArchivos;
					idList.addItem(val);
				}
				//startPolling();
				if(idList.length>0 && idList.length<2)
				{	
					//reversarArchivoGeneradoResult.token = logsArchivoService.reversarArchivoGenerado(idList);
					ventana = WndLogArchivo(PopUpManager.createPopUp(this, WndLogArchivo, true));
					
					var hist:HistoricoLogsGeneraArch= new HistoricoLogsGeneraArch();
					hist.idLogArchivos = idList.getItemAt(0).toString();
					//ventana.setConsecutivoBatch("1");				
					ventana.setHistoricoLogsGeneraArch(hist);
					ventana.addEventListener(CloseEvent.CLOSE, closeMeCargue, false, 0, true);
					
				}
				else
				{
					Alert.show("Seleccione un unico registro para ver su Log");
				}
			}

			private function closeMeCargue(e:CloseEvent):void {
				PopUpManager.removePopUp(ventana);
				ventana.removeEventListener(CloseEvent.CLOSE, closeMeCargue);
			}			
			import mx.core.ScrollPolicy;	
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- <s:CallResponder id="findLogsGeneraArchivoResult" result="logsGeneraArchivo = findLogsGeneraArchivoResult.lastResult[0] as LogsGeneraArchivo"/> -->
		<s:CallResponder id="findLogsGeneraArchivoResult" result="findLogsGeneraArchivoResult_resultHandler(event)"/>
		<services:LogsArchivoService id="logsArchivoService" fault="Alert.show('Existen errores, por favor inténtelo de nuevo','Error')" showBusyCursor="true"/>
		<valueObjects:LogsGeneraArchivo id="logsGeneraArchivo"/>
		<s:CallResponder id="reversarArchivoGeneradoResult" result="reversarArchivoGeneradoResult_resultHandler(event)"/>
		<s:CallResponder id="getMensajeTransaccionResult" result="getMensajeTransaccionResult_resultHandler(event)"/>
		<mx:DateFormatter id="formatDateTime" formatString="DD/MM/YYYY JJ:NN:SS" />
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:Component id="inlineEditor">
			<mx:ComboBox selectedIndex="0">
				<mx:dataProvider>
					<fx:String>G</fx:String>
					<fx:String>R</fx:String>
					<fx:String>E</fx:String>
					<fx:String>V</fx:String>
				</mx:dataProvider>
			</mx:ComboBox>
		</fx:Component>
		<s:CallResponder id="setEstadoResult"/>
		<s:CallResponder id="setEstadoResult2" result="setEstadoResult2_resultHandler(event)"/>
		<s:CallResponder id="getValoresDominioProcedatosResult"/>
		<s:CallResponder id="setUsuarioTransaccionResult2"/>
		<services:DominiosAuxDao id="dominiosAuxDao" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="getAvaluosResult" result="getAvaluosResult_resultHandler(event)"/>
		<!-- Se configura en remoting-config.xml-->
		<services:ArchivoProcedatosService id="archivoProcedatosService" fault="Alert.show('Existen errores, por favor inténtelo de nuevo','Error')" showBusyCursor="true"/>
		<s:CallResponder id="setUsuarioTransaccionResult"/>


		
		<!--<mx:Producer id="producer" destination="MensajeCargueDataPush" 
					 acknowledge="ack(event)"/>
		<mx:Consumer id="consumer" destination="MensajeCargueDataPush" 
					 message="messageHandler(event.message)" />-->
		
	</fx:Declarations>
	<fx:Style source="assets/css/AvaluosBolivar.css"/>
	<fx:Style source="assets/css/AvaluosBolivarPanel.css"/>
	<s:Panel x="54" y="7" width="800" height="328" id="pnlLogsarchivo" dropShadowVisible="false" borderVisible="true">
		
		<!--<s:ComboBox id="comboBox" x="251" y="56">
			<s:dataProvider>
				<mx:ArrayList>
					<fx:String>{ScrollPolicy.AUTO}</fx:String>
					<fx:String>{ScrollPolicy.OFF}</fx:String>
					<fx:String>{ScrollPolicy.ON}</fx:String>
				</mx:ArrayList>
			</s:dataProvider>
		</s:ComboBox>-->
		
		<!--<mx:DataGrid horizontalScrollPolicy="{comboBox.selectedItem}" allowMultipleSelection="true" x="10" y="98" width="778" height="160" id="dtgLogsArchivo" creationComplete="dtgLogsArchivo_creationCompleteHandler(event)" dataProvider="{findLogsGeneraArchivoResult.lastResult}" editable="true">-->
		<mx:DataGrid horizontalScrollPolicy="{ScrollPolicy.AUTO}" allowMultipleSelection="true" x="10" y="98" width="778" height="160" id="dtgLogsArchivo" creationComplete="dtgLogsArchivo_creationCompleteHandler(event)" dataProvider="{findLogsGeneraArchivoResult.lastResult}" editable="true">			
			<mx:columns>
				<mx:DataGridColumn dataField="idLogArchivos" headerText="Id" resizable="false" sortable="true" width="45" textAlign="center" editable="false"/>
				<mx:DataGridColumn headerText="Nombre Archivo" dataField="nombreArchivo" resizable="true" sortable="true" editable="false" textAlign="center" width="160"/>
				<mx:DataGridColumn headerText="Estado" dataField="estado" editorDataField="selectedItem" itemEditor="{inlineEditor}" textAlign="center" editable="false" resizable="false" width="90"/>
				<mx:DataGridColumn dataField="fechaInicioCreacion" headerText="Inicio Generación" labelFunction="labelFechaInicio" editable="false" resizable="true" sortable="true" width="90"/>
				<mx:DataGridColumn dataField="fechaFinCreacion" headerText="Fin Generación" labelFunction="labelFechaFin" editable="false" resizable="true" sortable="true" width="80"/>
				<mx:DataGridColumn headerText="Log/Error" dataField="codigoError" editable="false" textAlign="center" sortable="false" resizable="true" width="65">
					<mx:itemRenderer>
						<fx:Component>
							<mx:LinkButton label="Ver" click="outerDocument.linkbutton2_clickHandler(event)" />
						</fx:Component>						
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn textAlign="center" resizable="false" sortable="false" dataField="linkDescarga" headerText="Descarga" editable="false" width="70">
					<mx:itemRenderer>
						<fx:Component>
							<mx:LinkButton label="Descargar" click="outerDocument.linkbutton1_clickHandler(event)" />
						</fx:Component>						
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="usuarioCreacion" headerText="Usuario" width="40" editable="false"/>
				<mx:DataGridColumn dataField="cantReg" headerText="Cant. Avaluos" width="30" editable="false"/>
			</mx:columns>
		</mx:DataGrid>
		<s:Button x="10" y="266" label="Reversar Selección" id="btnReversar"  click="btnReversar_clickHandler(event)" enabled="false"/>
		<s:Button x="361" y="266" label="Registro Log archivo" id="btnLog"  click="btnLog_clickHandler(event)" enabled="false"/>
		<mx:Form x="10" y="39" label="Consultar Logs Archivos Generados">
			<mx:FormItem label="Estado">
				<s:ComboBox id="cbxEstadoLog" creationComplete="cbxEstadoLog_creationCompleteHandler(event)" labelField="rvMeaning" selectedItem="{getValoresDominioProcedatosResult.lastResult[3]}">
					<s:AsyncListView list="{getValoresDominioProcedatosResult.lastResult}" />
				</s:ComboBox>
			</mx:FormItem>
		</mx:Form>
		<s:Button x="139" y="266" label="Cambiar Estado Selección a Enviado" id="btnCambiarEstado" click="btnCambiarEstado_clickHandler(event)" enabled="false"/>
		<s:Label x="306" y="8" text="Logs Archivo Asobancaria-CIFIN" fontWeight="bold"/>
		<mx:HBox width="666" x="27" y="29">
			<s:Label text="Fecha Archivo Desde" width="119"/>
			<mx:DateField id="fechaAvaluoFiltro" formatString="DD/MM/YYYY" creationComplete="dateChooser_init(fechaAvaluoFiltro)" yearNavigationEnabled="true" editable="true" width="150" tabIndex="10"/>
			<s:Label text="Fecha Archivo Hasta" width="142"/>
			<mx:DateField id="fechaAvaluoFiltroHasta" formatString="DD/MM/YYYY" creationComplete="dateChooser_init(fechaAvaluoFiltroHasta)" yearNavigationEnabled="true" editable="true" width="150" tabIndex="11"/>
		</mx:HBox>
	</s:Panel>
	<s:Panel x="55" y="339" width="800" height="148" id="pnlGenerarArchivo" dropShadowVisible="false">
		<mx:Form x="10" y="26" >
			<mx:FormItem label="Fecha Hasta">
				<mx:DateField id="fechaCorte" creationComplete="dateChooser_init(fechaCorte)" formatString="DD/MM/YYYY"/>
			</mx:FormItem>
			<s:Button label="Generar" click="button1_clickHandler(event)" id="button"/>
		</mx:Form>
		<s:Label x="5" y="10" text="Generar archivo" fontWeight="bold" width="100%" textAlign="center"/>
		
		<s:Label x="234" y="30" width="554" height="75" fontWeight="bold" verticalAlign="middle" textAlign="center" id="estadoProc"/>
	</s:Panel>
	
</mx:Module>
